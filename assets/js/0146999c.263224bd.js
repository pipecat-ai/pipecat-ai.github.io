"use strict";(self.webpackChunkpipecat_docs=self.webpackChunkpipecat_docs||[]).push([[746],{4291:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var o=t(4848),r=t(8453);const s={},i="Basic Deployment Pattern",a={id:"deploying-your-bot/basic-pattern",title:"Basic Deployment Pattern",description:"Project Structure",source:"@site/docs/deploying-your-bot/02-basic-pattern.md",sourceDirName:"deploying-your-bot",slug:"/deploying-your-bot/basic-pattern",permalink:"/docs/deploying-your-bot/basic-pattern",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/deploying-your-bot/02-basic-pattern.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/docs/deploying-your-bot/overview"},next:{title:"Deploying with Fly.io",permalink:"/docs/deploying-your-bot/fly"}},l={},c=[{value:"Project Structure",id:"project-structure",level:2},{value:"Bot Runner",id:"bot-runner",level:2},{value:"Data transport",id:"data-transport",level:3},{value:"Best practice for bot files",id:"best-practice-for-bot-files",level:3},{value:"Showing a web UI",id:"showing-a-web-ui",level:3},{value:"Example",id:"example",level:2},{value:"HTTP API",id:"http-api",level:3},{value:"Dockerfile",id:"dockerfile",level:3},{value:"How it works",id:"how-it-works",level:3},{value:"Best practices",id:"best-practices",level:3},{value:"Build and run",id:"build-and-run",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"basic-deployment-pattern",children:"Basic Deployment Pattern"}),"\n",(0,o.jsx)(n.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,o.jsx)(n.p,{children:"A Pipecat project will often consist of the following:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"A bot file"}),", e.g. ",(0,o.jsx)(n.code,{children:"bot.py"})," - A scoped Pipecat bot, containing all the pipelines that you want to run in order to communicate with an end-user. A bot file may take some command line arguments, such as a transport URL and configuration."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"A runner"}),", e.g. ",(0,o.jsx)(n.code,{children:"bot_runner.py"})," \u2014 A basic HTTP service that listens for incoming user requests and spawns the relevant bot file in response."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsxs)(n.em,{children:["Please note: you can call these files whatever you like! We use ",(0,o.jsx)(n.code,{children:"bot.py"})," and ",(0,o.jsx)(n.code,{children:"bot_runner.py"})," for simplicity."]})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"bot-runner",children:"Bot Runner"}),"\n",(0,o.jsx)(n.p,{children:"HTTP service, providing a gateway for spawning bots on-demand:"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Basic pipeline image",src:t(526).A+"",width:"1148",height:"573"})}),"\n",(0,o.jsx)(n.p,{children:"The anatomy of a bot runner service is arbitrary and dependant on your use-case, but at very least will have a method that spawns a new bot agent, for example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import uvicorn\n\nfrom fastapi import FastAPI, Request, HTTPException\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\n@app.post("/start_bot")\nasync def start_bot(request: Request) -> JSONResponse:\n    # ... handle / authenticate the request\n    # ... provision the transport session\n    \n    # Spawn a new bot process\n    try:\n       #... create a new bot instance\n    except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f"Failed to start bot: {e}")\n            \n    # Return the room URL and token to the user\n    return JSONResponse({...})\n\nif __name__ == "__main__":\n    uvicorn.run(\n        "bot_runner:app",\n        host="0.0.0.0",\n        port=7860\n    )\n\n'})}),"\n",(0,o.jsx)(n.p,{children:"Here, we listen for incoming user requests or webhook, hoist the session (such as creating rooms on your transport provider), instantiate a new bot agent and return some JSON to a user."}),"\n",(0,o.jsx)(n.h3,{id:"data-transport",children:"Data transport"}),"\n",(0,o.jsxs)(n.p,{children:["Your ",(0,o.jsx)(n.a,{href:"/docs/category/transports",children:"transport layer"})," is responsible for sending and receiving media data over the internet."]}),"\n",(0,o.jsxs)(n.p,{children:["You will have implemented a transport layer as part of your ",(0,o.jsx)(n.code,{children:"bot.py"})," pipeline. This may be a service that you want to host and include in your deployment, or it may be a third-party service waiting for peers to connect (such as ",(0,o.jsx)(n.a,{href:"https://www.daily.co",children:"Daily"}),".)"]}),"\n",(0,o.jsxs)(n.p,{children:["For this example, we will make use of Daily\u2019s WebRTC transport. This will mean that our ",(0,o.jsx)(n.code,{children:"bot_runner.py"}),"  will need to do some configuration when it spawns a new bot:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Create and configure a new Daily room for the session to take place in."}),"\n",(0,o.jsx)(n.li,{children:"Issue both the bot and the user an authentication token to join the session."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Whatever you use for your transport layer, you\u2019ll likely need to setup some environmental variables and run some custom code before spawning the agent."}),"\n",(0,o.jsx)(n.h3,{id:"best-practice-for-bot-files",children:"Best practice for bot files"}),"\n",(0,o.jsxs)(n.p,{children:["A good pattern to work to is the assumption that your ",(0,o.jsx)(n.code,{children:"bot.py"})," is an encapsulated entity and does not have any knowledge of the ",(0,o.jsx)(n.code,{children:"bot_runner.py"}),". You should provide the bot everything it needs to operate during instantiation."]}),"\n",(0,o.jsx)(n.p,{children:"Sticking to this approach helps keep things simple and makes it easier to step through debugging (if the bot launched and something goes wrong, you know to look for errors in your bot file.)"}),"\n",(0,o.jsx)(n.h3,{id:"showing-a-web-ui",children:"Showing a web UI"}),"\n",(0,o.jsxs)(n.p,{children:["If you\u2019re not using phone numbers to talk to your bot, you may want to serve a user interface. You could optionally serve static files at the root directory of your ",(0,o.jsx)(n.code,{children:"bot_runner.py"}),", but we recommend keeping this separate so you have less to debug later and your container is kept light."]}),"\n",(0,o.jsx)(n.p,{children:"For the purposes of being feature complete in this documentation, we\u2019ll include simple static file serving so that we only need to containerize and deploy a single project."}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,o.jsxs)(n.p,{children:["As a first step, let's create a ",(0,o.jsx)(n.code,{children:"bot_runner.py"})," that:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Creates an API for users to send requests to"}),"\n",(0,o.jsx)(n.li,{children:"Launches a bot as a subprocess"}),"\n",(0,o.jsx)(n.li,{children:"Serves a static web frontend for the user to interact with"}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["A full example of this code can be found in the ",(0,o.jsx)(n.a,{href:"https://github.com/pipecat-ai/pipecat/tree/main/examples",children:"examples folder"})," on the pipecat repo."]}),"\n",(0,o.jsx)(n.h3,{id:"http-api",children:"HTTP API"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"bot_runner.py"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import os\nimport argparse\nimport subprocess\nimport requests\n\nfrom pipecat.transports.services.helpers.daily_rest import DailyRESTHelper, DailyRoomObject, DailyRoomProperties, DailyRoomParams\n\nfrom fastapi import FastAPI, Request, HTTPException\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom fastapi.responses import JSONResponse\n\nfrom dotenv import load_dotenv\nload_dotenv(override=True)\n\n\n# ------------ Configuration ------------ #\n\nMAX_SESSION_TIME = 5 * 60  # 5 minutes\nREQUIRED_ENV_VARS = [\n    \'DAILY_API_KEY\',\n    \'OPENAI_API_KEY\',\n    \'ELEVENLABS_API_KEY\',\n    \'ELEVENLABS_VOICE_ID\']\n\ndaily_rest_helper = DailyRESTHelper(\n    os.getenv("DAILY_API_KEY", ""),\n    os.getenv("DAILY_API_URL", \'https://api.daily.co/v1\'))\n\n\n# ----------------- API ----------------- #\n\napp = FastAPI()\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=["*"],\n    allow_credentials=True,\n    allow_methods=["*"],\n    allow_headers=["*"]\n)\n\n# ----------------- Main ----------------- #\n\n\n@app.post("/start_bot")\nasync def start_bot(request: Request) -> JSONResponse:\n    try:\n        data = await request.json()\n        # Is this a webhook creation request?\n        if "test" in data:\n            return JSONResponse({"test": True})\n    except Exception as e:\n        pass\n\n    # Use specified room URL, or create a new one if not specified\n    room_url = os.getenv("DAILY_SAMPLE_ROOM_URL", "")\n\n    if not room_url:\n        params = DailyRoomParams(\n            properties=DailyRoomProperties()\n        )\n        try:\n            room: DailyRoomObject = daily_rest_helper.create_room(params=params)\n        except Exception as e:\n            raise HTTPException(\n                status_code=500,\n                detail=f"Unable to provision room {e}")\n    else:\n        # Check passed room URL exists, we should assume that it already has a sip set up\n        try:\n            room: DailyRoomObject = daily_rest_helper.get_room_from_url(room_url)\n        except Exception:\n            raise HTTPException(\n                status_code=500, detail=f"Room not found: {room_url}")\n\n    # Give the agent a token to join the session\n    token = daily_rest_helper.get_token(room.url, MAX_SESSION_TIME)\n\n    if not room or not token:\n        raise HTTPException(\n            status_code=500, detail=f"Failed to get token for room: {room_url}")\n\n    try:\n        subprocess.Popen(\n            [f"python3 -m bot -u {room.url} -t {token}"],\n            shell=True,\n            bufsize=1,\n            cwd=os.path.dirname(os.path.abspath(__file__)))\n    except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f"Failed to start subprocess: {e}")\n\n    # Grab a token for the user to join with\n    user_token = daily_rest_helper.get_token(room.url, MAX_SESSION_TIME)\n\n    return JSONResponse({\n        "room_url": room.url,\n        "token": user_token,\n    })\n\nif __name__ == "__main__":\n    # Check environment variables\n    for env_var in REQUIRED_ENV_VARS:\n        if env_var not in os.environ:\n            raise Exception(f"Missing environment variable: {env_var}.")\n\n    parser = argparse.ArgumentParser(description="Pipecat Bot Runner")\n    parser.add_argument("--host", type=str,\n                        default=os.getenv("HOST", "0.0.0.0"), help="Host address")\n    parser.add_argument("--port", type=int,\n                        default=os.getenv("PORT", 7860), help="Port number")\n    parser.add_argument("--reload", action="store_true",\n                        default=False, help="Reload code on change")\n\n    config = parser.parse_args()\n\n    try:\n        import uvicorn\n\n        uvicorn.run(\n            "bot_runner:app",\n            host=config.host,\n            port=config.port,\n            reload=config.reload\n        )\n\n    except KeyboardInterrupt:\n        print("Pipecat runner shutting down...")\n\n'})}),"\n",(0,o.jsx)(n.h3,{id:"dockerfile",children:"Dockerfile"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"FROM python:3.11-bullseye\n\n# Open port 7860 for http service\nENV FAST_API_PORT=7860\nEXPOSE 7860\n\n# Install Python dependencies\nCOPY *.py .\nCOPY ./requirements.txt requirements.txt\nRUN pip3 install --no-cache-dir --upgrade -r requirements.txt\n\n# Install models\nRUN python3 install_deps.py\n\n# Start the FastAPI server\nCMD python3 bot_runner.py --port ${FAST_API_PORT}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The bot runner and bot ",(0,o.jsx)(n.code,{children:"requirements.txt"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"pipecat-ai[...]\nfastapi\nuvicorn\nrequests\npython-dotenv\n"})}),"\n",(0,o.jsxs)(n.p,{children:["And finally, let's create a ",(0,o.jsx)(n.code,{children:".env"})," file with our service keys"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"DAILY_API_KEY=...\nOPENAI_API_KEY=...\nELEVENLABS_API_KEY=...\nELEVENLABS_VOICE_ID=...\n"})}),"\n",(0,o.jsx)(n.h3,{id:"how-it-works",children:"How it works"}),"\n",(0,o.jsxs)(n.p,{children:["Right now, this runner is spawning ",(0,o.jsx)(n.code,{children:"bot.py"})," as a subprocess. When spawning the process, we pass through the transport room and token as system arguments to our bot, so it knows where to connect."]}),"\n",(0,o.jsx)(n.p,{children:"Subprocesses serve as a great way to test out your bot in the cloud without too much hassle, but depending on the size of the host machine, it will likely not hold up well under load."}),"\n",(0,o.jsx)(n.p,{children:"Whilst some bots are just simple operators between the transport and third-party AI services (such as OpenAI), others have somewhat CPU-intensive operations, such as running and loading VAD models, so you may find you\u2019re only able to scale this to support up to 5-10 concurrent bots."}),"\n",(0,o.jsx)(n.h3,{id:"best-practices",children:"Best practices"}),"\n",(0,o.jsx)(n.p,{children:"In an ideal world, we'd recommend containerizing the bot and the bot runner independently to keep the image for the bot to a bare minimum (it very likely doesn't need Node, or the static files etc.) For the sake of simplicity we're just using one container for everything."}),"\n",(0,o.jsx)(n.h3,{id:"build-and-run",children:"Build and run"}),"\n",(0,o.jsx)(n.p,{children:"We should now have a project that contains the following files:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"bot.py"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"bot_runner.py"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"requirements.txt"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:".env"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"Dockerfile"})}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"docker build ..."})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},526:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/deployment-1-45746f9dbaed47b79f88ecaaf4d74064.png"},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var o=t(6540);const r={},s=o.createContext(r);function i(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);