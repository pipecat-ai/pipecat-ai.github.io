"use strict";(self.webpackChunkpipecat_docs=self.webpackChunkpipecat_docs||[]).push([[577],{2335:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var o=t(4848),s=t(8453);const i={},r="Deploying with Fly.io",a={id:"deploying-your-bot/fly",title:"Deploying with Fly.io",description:"Project setup",source:"@site/docs/deploying-your-bot/03-fly.md",sourceDirName:"deploying-your-bot",slug:"/deploying-your-bot/fly",permalink:"/docs/deploying-your-bot/fly",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/deploying-your-bot/03-fly.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Basic Deployment Pattern",permalink:"/docs/deploying-your-bot/basic-pattern"},next:{title:"Advanced Topics",permalink:"/docs/category/advanced-topics"}},l={},c=[{value:"Project setup",id:"project-setup",level:2},{value:"Install the Fly CLI",id:"install-the-fly-cli",level:3},{value:"Creating the Pipecat project",id:"creating-the-pipecat-project",level:2},{value:"Adding a fly.toml",id:"adding-a-flytoml",level:3},{value:"Setting up the environment",id:"setting-up-the-environment",level:2},{value:"Containerize our app",id:"containerize-our-app",level:2},{value:"What models are we downloading?",id:"what-models-are-we-downloading",level:3},{value:"Launching new machines in <code>bot_runner.py</code>",id:"launching-new-machines-in-bot_runnerpy",level:2},{value:"Launch the Fly project",id:"launch-the-fly-project",level:3},{value:"Test it out",id:"test-it-out",level:3},{value:"Important considerations",id:"important-considerations",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"deploying-with-flyio",children:"Deploying with Fly.io"}),"\n",(0,o.jsx)(n.h2,{id:"project-setup",children:"Project setup"}),"\n",(0,o.jsxs)(n.p,{children:["Let's explore how we can use ",(0,o.jsx)(n.a,{href:"www.fly.io",children:"fly.io"})," to make our app scalable for production, spawning our Pipecat bots on virtual machines with their own resources. We like Fly as it provides a REST API for launching new machines, but please note that the same principles here apply to other cloud hosting providers."]}),"\n",(0,o.jsxs)(n.p,{children:["We mentioned before that you would likely want to containerize the ",(0,o.jsx)(n.code,{children:"bot_runner.py"})," web service and the ",(0,o.jsx)(n.code,{children:"bot.py"})," separately. To keep this example simple, we'll use the same image for both services."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Fly.io Pipecat deployment",src:t(2147).A+"",width:"1148",height:"651"})}),"\n",(0,o.jsx)(n.h3,{id:"install-the-fly-cli",children:"Install the Fly CLI"}),"\n",(0,o.jsxs)(n.p,{children:["You can find instructions for creating and setting up your fly account ",(0,o.jsx)(n.a,{href:"https://fly.io/docs/getting-started/",children:"here"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"creating-the-pipecat-project",children:"Creating the Pipecat project"}),"\n",(0,o.jsxs)(n.p,{children:["We have created a template project ",(0,o.jsx)(n.a,{href:"https://github.com/pipecat-ai/pipecat/tree/main/examples/deployment/flyio-example",children:"here"})," which you can clone. Since we're targeting production use-cases, this example uses Daily (WebRTC) as a transport, but you can configure your bot however you like."]}),"\n",(0,o.jsx)(n.h3,{id:"adding-a-flytoml",children:"Adding a fly.toml"}),"\n",(0,o.jsxs)(n.p,{children:["Add a ",(0,o.jsx)(n.code,{children:"fly.toml"})," to the root of your project directory. Here is a basic example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"app = 'some-unique-app-name'\nprimary_region = 'sjc'\n\n[build]\n\n[env]\n  FLY_APP_NAME = 'some-unique-app-name'\n\n[http_service]\n  internal_port = 7860\n  force_https = true\n  auto_stop_machines = true\n  auto_start_machines = true\n  min_machines_running = 0\n  processes = ['app']\n\n[[vm]]\n  memory = 512\n  cpu_kind = 'shared'\n  cpus = 1\n"})}),"\n",(0,o.jsxs)(n.p,{children:["For apps with lots of users, consider what resources your HTTP service will require to meet load. We'll define our ",(0,o.jsx)(n.code,{children:"bot.py"})," resources later, so you can set and scale these as you like (",(0,o.jsx)(n.code,{children:"fly scale ..."}),")"]}),"\n",(0,o.jsx)(n.h2,{id:"setting-up-the-environment",children:"Setting up the environment"}),"\n",(0,o.jsxs)(n.p,{children:["Our bot requires some API keys and configuration, so create a ",(0,o.jsx)(n.code,{children:".env"})," in your project root:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"DAILY_API_KEY=\nOPENAI_API_KEY=\nELEVENLABS_API_KEY=\nELEVENLABS_VOICE_ID=\nFLY_API_KEY=\nFLY_APP_NAME=\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Of course, the exact keys you need will depend on which services you are using within your ",(0,o.jsx)(n.code,{children:"bot.py"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Important:"})," your ",(0,o.jsx)(n.code,{children:"FLY_APP_NAME"})," should match the name of your fly instance, such as that declared in your fly.toml."]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:".env"})," will allow us to test in local development, but is not included in the deployment. You'll need to set them as Fly app secrets, which you can do via the Fly dashboard or cli."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"fly secrets set ..."})}),"\n",(0,o.jsx)(n.h2,{id:"containerize-our-app",children:"Containerize our app"}),"\n",(0,o.jsxs)(n.p,{children:["Our Fly deployment will need a container image, so let's create a simple ",(0,o.jsx)(n.code,{children:"Dockerfile"})," in the root of the project:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"FROM python:3.11-bullseye\n\n# Open port 7860 for http service\nENV FAST_API_PORT=7860\nEXPOSE 7860\n\n# Install Python dependencies\nCOPY *.py .\nCOPY ./requirements.txt requirements.txt\nRUN pip3 install --no-cache-dir --upgrade -r requirements.txt\n\n# Install models\nRUN python3 install_deps.py\n\n# Start the FastAPI server\nCMD python3 bot_runner.py --port ${FAST_API_PORT}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Our container does the following:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Opens port ",(0,o.jsx)(n.code,{children:"7860"})," to serve our ",(0,o.jsx)(n.code,{children:"bot_runner.py"})," FastAPI service."]}),"\n",(0,o.jsx)(n.li,{children:"Downloads the necessary python dependencies."}),"\n",(0,o.jsxs)(n.li,{children:["Download / cache the model dependencies the ",(0,o.jsx)(n.code,{children:"bot.py"})," requires."]}),"\n",(0,o.jsxs)(n.li,{children:["Runs the ",(0,o.jsx)(n.code,{children:"bot_runner.py"})," and listens for web requests."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"what-models-are-we-downloading",children:"What models are we downloading?"}),"\n",(0,o.jsx)(n.p,{children:"To support voice activity detection, we're using Silero VAD. Whilst the filesize is not huge, having each new machine download the Silero model at runtime will impact bootup time. Instead, we include the model as part of the Docker image so it's cached and available."}),"\n",(0,o.jsx)(n.p,{children:"You could, of course, also attach a network volume to each instance if you plan to include larger files as part of your deployment and don't want to bloat the size of your image."}),"\n",(0,o.jsxs)(n.h2,{id:"launching-new-machines-in-bot_runnerpy",children:["Launching new machines in ",(0,o.jsx)(n.code,{children:"bot_runner.py"})]}),"\n",(0,o.jsx)(n.p,{children:"When a user starts a session with our Pipecat bot, we want to launch a new machine on fly.io with it's own system resources."}),"\n",(0,o.jsxs)(n.p,{children:["Let's grab the bot_runner.py from the example repo ",(0,o.jsx)(n.a,{href:"https://github.com/pipecat-ai/pipecat/blob/jpt/deployment-examples/examples/deployment/flyio-example/bot_runner.py",children:"here"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"This runner differs from others in the Pipecat repo; we've added a new method that sends a REST request to Fly to provision a new machine for the session."}),"\n",(0,o.jsxs)(n.p,{children:["This method is invoked as part of the ",(0,o.jsx)(n.code,{children:"/start_bot"})," endpoint:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'FLY_API_HOST = os.getenv("FLY_API_HOST", "https://api.machines.dev/v1")\nFLY_APP_NAME = os.getenv("FLY_APP_NAME", "your-fly-app-name")\nFLY_API_KEY = os.getenv("FLY_API_KEY", "")\nFLY_HEADERS = {\n    \'Authorization\': f"Bearer {FLY_API_KEY}",\n    \'Content-Type\': \'application/json\'\n}\n\ndef spawn_fly_machine(room_url: str, token: str):\n    # Use the same image as the bot runner\n    res = requests.get(f"{FLY_API_HOST}/apps/{FLY_APP_NAME}/machines", headers=FLY_HEADERS)\n    if res.status_code != 200:\n        raise Exception(f"Unable to get machine info from Fly: {res.text}")\n    image = res.json()[0][\'config\'][\'image\']\n\n    # Machine configuration\n    cmd = f"python3 bot.py -u {room_url} -t {token}"\n    cmd = cmd.split()\n    worker_props = {\n        "config": {\n            "image": image,\n            "auto_destroy": True,\n            "init": {\n                "cmd": cmd\n            },\n            "restart": {\n                "policy": "no"\n            },\n            "guest": {\n                "cpu_kind": "shared",\n                "cpus": 1,\n                "memory_mb": 1024 # Note: 512 is just enough to run VAD, but 1gb is better\n            }\n        },\n\n    }\n\n    # Spawn a new machine instance\n    res = requests.post(\n        f"{FLY_API_HOST}/apps/{FLY_APP_NAME}/machines",\n        headers=FLY_HEADERS,\n        json=worker_props)\n\n    if res.status_code != 200:\n        raise Exception(f"Problem starting a bot worker: {res.text}")\n\n    # Wait for the machine to enter the started state\n    vm_id = res.json()[\'id\']\n\n    res = requests.get(\n        f"{FLY_API_HOST}/apps/{FLY_APP_NAME}/machines/{vm_id}/wait?state=started",\n        headers=FLY_HEADERS)\n\n    if res.status_code != 200:\n        raise Exception(f"Bot was unable to enter started state: {res.text}")\n'})}),"\n",(0,o.jsx)(n.p,{children:"We want to make sure the machine started ok before returning any data to the user. Fly launches machines pretty fast, but will timeout if things take longer than they should. Depending on your transport method, you may want to optimistically return a response to the user, so they can join the room and poll the status of their bot."}),"\n",(0,o.jsx)(n.h3,{id:"launch-the-fly-project",children:"Launch the Fly project"}),"\n",(0,o.jsx)(n.p,{children:"Getting your bot on Fly is as simple as:"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"fly launch"})," or ",(0,o.jsx)(n.code,{children:"fly launch --org orgname"})," if you're part of a team."]}),"\n",(0,o.jsx)(n.p,{children:"This will step you through some configuration, and build and deploy your Docker image."}),"\n",(0,o.jsx)(n.p,{children:"Be sure to configure your app secrets with the necessary environment variables once the deployment has complete."}),"\n",(0,o.jsxs)(n.p,{children:["Assuming all goes well, you can update with any changes with ",(0,o.jsx)(n.code,{children:"fly deploy"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"test-it-out",children:"Test it out"}),"\n",(0,o.jsxs)(n.p,{children:["Start a new bot instance by sending a ",(0,o.jsx)(n.code,{children:"POST"})," request to ",(0,o.jsx)(n.code,{children:"https://your-fly-url.fly.dev/start_bot"}),". All being well, this will return a room URL and token."]}),"\n",(0,o.jsx)(n.h2,{id:"important-considerations",children:"Important considerations"}),"\n",(0,o.jsxs)(n.p,{children:["This example does little in the way of load balancing or app security. Indeed, a user can spawn a new machine on your account simply by sending a post request to the ",(0,o.jsx)(n.code,{children:"bot_runner.py"}),". Be sure to configure a maximum number of instances, or authenticate requests to avoid costs getting out of control."]}),"\n",(0,o.jsxs)(n.p,{children:["We also deployed our ",(0,o.jsx)(n.code,{children:"bot.py"})," on a machine with the same image as our ",(0,o.jsx)(n.code,{children:"bot_runner.py"}),". To optimize container file sizes and increase security, consider individual images that only deploy resources they require."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},2147:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/deployment-fly-cadfe426e9a972adbd3a5262c8705756.png"},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var o=t(6540);const s={},i=o.createContext(s);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);